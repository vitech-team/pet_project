buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$gradlePluginVersion")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubeVersion")
    }
}

group 'ua.com.vitech.internal'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.projectKey", "pet_proj"
        property "sonar.organization", "petproject"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", "b126a21d30d531bd01ad44b67f01264ee93546ae"
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = "$jacocoToolVersion"
    }
}

subprojects {
    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
    }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {

    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude:
                    [
                            '**/it/**',
                            '**/config/**'
                    ])
        })
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/*SecurityConfig*'
            ])
        })
    }

    reports {
        html.enabled true
        xml.enabled true
        xml.destination file("${buildDir}/target/site/jacoco/jacoco.xml")
        csv.enabled true
        csv.destination file("${buildDir}/target/site/jacoco/jacoco.csv")
    }
}

task installUiDependencies(type:Exec) {
    workingDir './dev-flow-sample-ui'
    commandLine 'npm', 'install'
}

task buildUi(type: Exec) {
    dependsOn 'installUiDependencies'
    workingDir './dev-flow-sample-ui'
    commandLine  'npm', 'run', 'build'
}

task copyUi(type:Copy) {
    dependsOn 'buildUi'
    from './dev-flow-sample-ui/build'
    into './dev-flow-sample-web/src/main/resources/static'
    include '**.html'
    include '**.js'
    include '**.json'
    include '**.ico'
    include 'static/**'
}


compileJava.dependsOn 'copyUi'

task unzip(type: Copy) {
    def zipFile = file('build/libs/dev-flow-sample-0.1.0.jar')
    def outputDir = file("${buildDir}/libs/dependency")

    from zipTree(zipFile)
    into outputDir
}

task decomposeLayers() {
    dependsOn 'build'
    dependsOn 'unzip'
}

task buildDockerImage(type:Exec) {
    dependsOn 'decomposeLayers'
    commandLine 'docker','build', '-t', 'vitech-team/pet_project:ci', '.'
}

bootJar {
    baseName = 'dev-flow-sample'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

springBoot {
    mainClassName = "ua.com.vitech.internal.sample.devflow.Application"
}
dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:$springBootStarterVersion")
    compile project(':dev-flow-sample-core')
    compile project(':dev-flow-sample-web')

    testCompile("junit:junit:$junitVersion")
    testCompile("org.springframework.boot:spring-boot-starter-test:$springBootStarterVersion")
}


subprojects {

    apply plugin: 'java'
    repositories {
        mavenCentral()
    }
    dependencies {
        compile("org.projectlombok:lombok:$lombokVersion")
        annotationProcessor("org.projectlombok:lombok:$lombokVersion")
        testCompile("junit:junit:$junitVersion")
    }
}
